"""
Django settings for lobikohealth project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i97vpfx(ge1^(q+-l==bmj%^igjk^4bqyfi!ue%g!dhzsc&le&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["lobiko.onrender.com", "127.0.0.1"]


# Application definition


# Configuration pour websocket
ASGI_APPLICATION = 'lobikohealth.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

INSTALLED_APPS = [
    'daphne',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'lobiko',
    'bot',
    'medecins',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lobikohealth.urls'

import os

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'lobikohealth.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',  # ← permet l'interface web de test
    )
}

CSRF_TRUSTED_ORIGINS = ['https://lobiko.onrender.com']

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Charger le fichier .env
load_dotenv()

# Maintenant récupérer les variables
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")

AWS_S3_MEDIA_FOLDER = 'whatsapp-media/'

# Configuration Amazon S3
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = 'eu-north-1'  # Région S3
AWS_S3_CUSTOM_DOMAIN = f'{os.getenv("AWS_STORAGE_BUCKET_NAME")}.s3.amazonaws.com'  # URL de téléchargement
AWS_DEFAULT_ACL = 'public-read'  # Permissions par défaut (si fichiers publics)
AWS_QUERYSTRING_AUTH = False  # Désactive les URL signées (optionnel)
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400', # Exemple: met en cache les fichiers pendant 24h
    'ContentDisposition': 'attachment', # C'est la ligne clé !
}

# Configuration des médias (QR codes, documents temporaires)
if not hasattr(locals(), 'MEDIA_ROOT'):
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = '/media/'

os.makedirs(MEDIA_ROOT, exist_ok=True)


TELEMEDICINE_S3_CONFIG = {
    'AWS_ACCESS_KEY_ID': AWS_ACCESS_KEY_ID,
    'AWS_SECRET_ACCESS_KEY': AWS_SECRET_ACCESS_KEY,
    'AWS_STORAGE_BUCKET_NAME': AWS_STORAGE_BUCKET_NAME,
    'AWS_S3_REGION_NAME': AWS_S3_REGION_NAME,
    'AWS_S3_CUSTOM_DOMAIN': AWS_S3_CUSTOM_DOMAIN,
    
    # Paramètres spécifiques pour les prescriptions médicales
    'PRESCRIPTIONS_FOLDER': 'prescriptions/',  # Dossier dédié dans votre bucket
    'QR_CODES_FOLDER': 'qr_codes/',           # Dossier pour les QR codes
    
    # Paramètres de sécurité renforcés pour les données médicales
    'PRESCRIPTION_OBJECT_PARAMETERS': {
        'CacheControl': 'max-age=3600',        # Cache plus court
        'ContentDisposition': 'attachment',     # Force le téléchargement
        'ContentType': 'application/pdf',       # Type MIME pour PDF
        'ServerSideEncryption': 'AES256',       # Chiffrement côté serveur
        'Metadata': {
            'document-type': 'medical-prescription',
            'created-by': 'lobiko-telemedicine'
        }
    },
    
    # URLs avec votre domaine personnalisé
    'USE_CUSTOM_DOMAIN': True,
    'SIGNED_URLS': False,  # Utilise vos paramètres existants
}

# Configuration de sécurité pour les prescriptions
PRESCRIPTION_ENCRYPTION_KEY = os.environ.get('PRESCRIPTION_ENCRYPTION_KEY', 'default-key-change-in-production')

# Configuration des logs pour la télémédecine
# Configuration de logging (optionnel mais recommandé)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'lobiko.telemedicine': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Créer le répertoire de logs s'il n'existe pas
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)


# Stockage des médias
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

